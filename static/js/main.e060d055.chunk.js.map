{"version":3,"sources":["Option.js","Player.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Option","props","options","rock","faHandRock","paper","faHandPaper","scissors","faHandScissors","react_default","a","createElement","index_es","icon","option","size","color","Player","className","player","name","won","selectedOption","Fragment","onClick","setPlayerOption","playerId","src_Option","gameState","winner","Game","state","players","gamesPlayed","resetGame","_this","setState","checkGameState","includes","setPlayerWinner","newPlayers","playerOption","render","map","src_Player","key","React","Component","App","_useState","useState","_useState2","Object","slicedToArray","gameId","setGameId","src_Game","startNewGame","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e060d055.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faHandPaper, faHandRock, faHandScissors} from '@fortawesome/free-solid-svg-icons'\n\nconst Option = (props) => {\n    const options = {\n        \"rock\": faHandRock,\n        \"paper\": faHandPaper,\n        \"scissors\": faHandScissors,\n    };\n\n    return (\n        <FontAwesomeIcon icon={options[props.option]} size=\"6x\" color={props.color}/>\n    );\n};\n\nexport default Option;\n","import React from 'react';\nimport Option from \"./Option\";\n\nconst Player = (props) => {\n    return (\n        <div className={\"player\"}>\n            <h3>Player {props.player.name} ({props.player.won} wins)</h3>\n            {props.player.selectedOption === '' ? (\n                <>\n                    <button onClick={() => props.setPlayerOption(props.playerId, \"rock\")} className={\"playerOption\"}>\n                        <Option option={\"rock\"}/></button>\n                    <button onClick={() => props.setPlayerOption(props.playerId, \"paper\")} className={\"playerOption\"}>\n                        <Option option={\"paper\"}/></button>\n                    <button onClick={() => props.setPlayerOption(props.playerId, \"scissors\")}\n                            className={\"playerOption\"}><Option option={\"scissors\"}/></button>\n                </>\n            ) : (\n                <Option\n                    option={props.player.selectedOption}\n                    color={props.gameState !== 'active' ?\n                        (\n                            props.player.winner ? 'green' : 'red'\n                        ) : (\n                            ''\n                        )}\n                />\n            )}\n\n        </div>\n    )\n};\n\nexport default Player;\n","import React from 'react';\nimport Player from \"./Player\";\n\nclass Game extends React.Component {\n    options = {\n        \"rock\": [\"scissors\"],\n        \"paper\": [\"rock\"],\n        \"scissors\": [\"paper\"]\n    };\n\n    state = {\n        players: [\n            {name: \"one\", selectedOption: \"\", winner: false, won: 0},\n            {name: \"two\", selectedOption: \"\", winner: false, won: 0}\n        ],\n\n        gameState: \"active\",\n        gamesPlayed: 0\n    };\n\n    resetGame = () => {\n        this.setState({\n            players: [\n                {name: \"one\", selectedOption: \"\", winner: false, won: this.state.players[0].won},\n                {name: \"two\", selectedOption: \"\", winner: false, won: this.state.players[1].won}\n            ],\n\n            gameState: \"active\"\n        });\n    };\n\n    checkGameState = () => {\n        if (this.state.players[0].selectedOption !== '' && this.state.players[1].selectedOption !== '') {\n            if (this.state.players[0].selectedOption === this.state.players[1].selectedOption) {\n                this.setState({gameState: 'draw'});\n            } else {\n                this.setState({gameState: 'complete'});\n            }\n\n            this.setState({gamesPlayed: this.state.gamesPlayed + 1});\n\n            if (this.options[this.state.players[0].selectedOption].includes(this.state.players[1].selectedOption)) {\n                this.setPlayerWinner(0);\n            } else if (this.options[this.state.players[1].selectedOption].includes(this.state.players[0].selectedOption)) {\n                this.setPlayerWinner(1);\n            }\n        }\n    };\n\n    setPlayerWinner = (playerId) => {\n        const newPlayers = this.state.players;\n        newPlayers[playerId].winner = true;\n        newPlayers[playerId].won = newPlayers[playerId].won + 1;\n\n        this.setState({players: newPlayers});\n    };\n\n    setPlayerOption = (playerId, playerOption) => {\n        const newPlayers = this.state.players;\n        newPlayers[playerId].selectedOption = playerOption;\n\n        this.setState({players: newPlayers});\n\n        this.checkGameState();\n    };\n\n    render = () => {\n        return (\n            <div className={\"game\"}>\n                <h1>Game state: {this.state.gameState}</h1>\n                <h2>Games played: {this.state.gamesPlayed}</h2>\n                {this.state.players.map((player, playerId) => (\n                    <Player\n                        key={playerId}\n                        playerId={playerId}\n                        player={this.state.players[playerId]}\n                        setPlayerOption={this.setPlayerOption}\n                        gameState={this.state.gameState}\n                    />\n                ))}\n                <br/>\n                {this.state.gameState !== 'active' ? (<button onClick={() => {\n                    this.resetGame()\n                }}>Again</button>) : <></>}\n            </div>\n        );\n    }\n};\n\nexport default Game;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Game from \"./Game\";\n\nfunction App() {\n    const [gameId, setGameId] = useState(1);\n\n    return (\n        <div className=\"App\">\n            <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}